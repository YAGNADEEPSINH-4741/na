"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/page",{

/***/ "(app-pages-browser)/./src/lib/google-api.ts":
/*!*******************************!*\
  !*** ./src/lib/google-api.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleApiManager: () => (/* binding */ GoogleApiManager)\n/* harmony export */ });\n/**\n * Google API utilities for Drive integration\n */ const CLIENT_ID = \"850316948462-o5aip3c43p343l4aksg3fn02pcjcqqaa.apps.googleusercontent.com\";\nconst API_KEY = \"AIzaSyBzTH1f_pjyoGLKA9GM2J9Y5VPg0K33nVQ\";\nconst SCOPES = 'https://www.googleapis.com/auth/drive.file';\nclass GoogleApiManager {\n    static getInstance() {\n        if (!GoogleApiManager.instance) {\n            GoogleApiManager.instance = new GoogleApiManager();\n        }\n        return GoogleApiManager.instance;\n    }\n    async initialize() {\n        if (this.isInitialized) return;\n        if (this.initPromise) return this.initPromise;\n        this.initPromise = this.doInitialize();\n        return this.initPromise;\n    }\n    async doInitialize() {\n        try {\n            // Check if credentials are available\n            if (!CLIENT_ID || !API_KEY) {\n                throw new Error('Google API credentials not configured. Please set NEXT_PUBLIC_GOOGLE_CLIENT_ID and NEXT_PUBLIC_GOOGLE_API_KEY in your .env.local file.');\n            }\n            // Wait for scripts to be available\n            await this.waitForScripts();\n            // Initialize GAPI\n            await this.initializeGapi();\n            // Initialize GSI\n            await this.initializeGsi();\n            this.isInitialized = true;\n        } catch (error) {\n            console.error('Failed to initialize Google APIs:', error);\n            throw new Error('Google API initialization failed');\n        }\n    }\n    waitForScripts() {\n        return new Promise((resolve, reject)=>{\n            const timeout = setTimeout(()=>{\n                reject(new Error('Google API scripts failed to load'));\n            }, 10000);\n            const checkScripts = ()=>{\n                var _window_google_accounts, _window_google;\n                if ( true && window.gapi && ((_window_google = window.google) === null || _window_google === void 0 ? void 0 : (_window_google_accounts = _window_google.accounts) === null || _window_google_accounts === void 0 ? void 0 : _window_google_accounts.oauth2)) {\n                    clearTimeout(timeout);\n                    resolve();\n                } else {\n                    setTimeout(checkScripts, 100);\n                }\n            };\n            checkScripts();\n        });\n    }\n    initializeGapi() {\n        return new Promise((resolve, reject)=>{\n            if (!window.gapi) {\n                reject(new Error('GAPI not available'));\n                return;\n            }\n            window.gapi.load('client', async ()=>{\n                try {\n                    await window.gapi.client.init({\n                        apiKey: API_KEY,\n                        discoveryDocs: [\n                            'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'\n                        ]\n                    });\n                    // Load the Drive API explicitly as a fallback\n                    await window.gapi.client.load('drive', 'v3');\n                    resolve();\n                } catch (error) {\n                    console.error('GAPI client initialization error details:', error);\n                    // Try alternative initialization without discovery docs\n                    try {\n                        await window.gapi.client.init({\n                            apiKey: API_KEY\n                        });\n                        await window.gapi.client.load('drive', 'v3');\n                        resolve();\n                    } catch (fallbackError) {\n                        if (error instanceof Error) {\n                            reject(new Error(\"Failed to initialize GAPI client: \".concat(error.message)));\n                        } else {\n                            reject(new Error(\"Failed to initialize GAPI client: \".concat(JSON.stringify(error))));\n                        }\n                    }\n                }\n            });\n        });\n    }\n    initializeGsi() {\n        return new Promise((resolve, reject)=>{\n            try {\n                var _window_google_accounts, _window_google;\n                if (!((_window_google = window.google) === null || _window_google === void 0 ? void 0 : (_window_google_accounts = _window_google.accounts) === null || _window_google_accounts === void 0 ? void 0 : _window_google_accounts.oauth2)) {\n                    reject(new Error('Google Identity Services not available'));\n                    return;\n                }\n                this.tokenClient = window.google.accounts.oauth2.initTokenClient({\n                    client_id: CLIENT_ID,\n                    scope: SCOPES,\n                    callback: (tokenResponse)=>{\n                        if (tokenResponse && tokenResponse.access_token) {\n                            window.gapi.client.setToken({\n                                access_token: tokenResponse.access_token\n                            });\n                        }\n                    },\n                    error_callback: (error)=>{\n                        console.error('GSI Error:', error);\n                    }\n                });\n                resolve();\n            } catch (error) {\n                reject(new Error('Failed to initialize Google Identity Services'));\n            }\n        });\n    }\n    async signIn() {\n        if (!this.tokenClient) {\n            throw new Error('Google API not initialized');\n        }\n        return new Promise((resolve, reject)=>{\n            if (!this.tokenClient) {\n                reject(new Error('Token client not available'));\n                return;\n            }\n            const originalCallback = this.tokenClient.callback;\n            this.tokenClient.callback = (tokenResponse)=>{\n                if (originalCallback) originalCallback(tokenResponse);\n                if (tokenResponse && tokenResponse.access_token) {\n                    resolve();\n                } else {\n                    reject(new Error('Failed to get access token'));\n                }\n            };\n            this.tokenClient.requestAccessToken({\n                prompt: 'consent'\n            });\n        });\n    }\n    signOut() {\n        var _window_gapi;\n        if ((_window_gapi = window.gapi) === null || _window_gapi === void 0 ? void 0 : _window_gapi.client) {\n            const token = window.gapi.client.getToken();\n            if (token) {\n                window.google.accounts.oauth2.revoke(token.access_token, ()=>{});\n            }\n            window.gapi.client.setToken(null);\n        }\n    }\n    isSignedIn() {\n        var _window_gapi_client_getToken, _window_gapi_client, _window_gapi;\n        return !!((_window_gapi = window.gapi) === null || _window_gapi === void 0 ? void 0 : (_window_gapi_client = _window_gapi.client) === null || _window_gapi_client === void 0 ? void 0 : (_window_gapi_client_getToken = _window_gapi_client.getToken()) === null || _window_gapi_client_getToken === void 0 ? void 0 : _window_gapi_client_getToken.access_token);\n    }\n    async uploadFile(blob, filename) {\n        if (!this.isSignedIn()) {\n            throw new Error('Not signed in');\n        }\n        const metadata = {\n            name: filename,\n            mimeType: blob.type\n        };\n        const formBody = new FormData();\n        formBody.append('metadata', new Blob([\n            JSON.stringify(metadata)\n        ], {\n            type: 'application/json'\n        }));\n        formBody.append('file', blob);\n        const token = window.gapi.client.getToken();\n        if (!token) {\n            throw new Error('No access token available');\n        }\n        const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', {\n            method: 'POST',\n            headers: {\n                'Authorization': \"Bearer \".concat(token.access_token)\n            },\n            body: formBody\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(\"Upload failed: \".concat(errorText));\n        }\n        const driveFile = await response.json();\n        // Make file public\n        await window.gapi.client.drive.permissions.create({\n            fileId: driveFile.id,\n            resource: {\n                role: 'reader',\n                type: 'anyone'\n            }\n        });\n        // Get public link\n        const fileDetails = await window.gapi.client.drive.files.get({\n            fileId: driveFile.id,\n            fields: 'webViewLink'\n        });\n        const publicLink = fileDetails.result.webViewLink;\n        if (!publicLink) {\n            throw new Error('Could not retrieve public link');\n        }\n        return publicLink;\n    }\n    constructor(){\n        this.tokenClient = null;\n        this.isInitialized = false;\n        this.initPromise = null;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/google-api.ts\n"));

/***/ })

});